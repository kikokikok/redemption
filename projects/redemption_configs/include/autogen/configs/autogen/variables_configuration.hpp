//
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
//

namespace cfg {
    /// AUTHID_GLOBALS_CAPTURE_CHUNK <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct globals::capture_chunk {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "capture_chunk"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(0); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_GLOBALS_AUTH_USER <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct globals::auth_user {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "auth_user"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(1); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_GLOBALS_HOST <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct globals::host {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "host"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(2); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_GLOBALS_TARGET <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct globals::target {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "target"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(3); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_GLOBALS_TARGET_DEVICE <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct globals::target_device {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "target_device"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(4); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_GLOBALS_DEVICE_ID <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct globals::device_id {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "device_id"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(5); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_GLOBALS_PRIMARY_USER_ID <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct globals::primary_user_id {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "primary_user_id"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(6); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_GLOBALS_TARGET_USER <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct globals::target_user {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "target_user"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(7); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_GLOBALS_TARGET_APPLICATION <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct globals::target_application {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "target_application"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(8); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_GLOBALS_TARGET_APPLICATION_ACCOUNT <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct globals::target_application_account {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "target_application_account"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(9); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_GLOBALS_TARGET_APPLICATION_PASSWORD <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct globals::target_application_password {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "target_application_password"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(10); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// Support of Bitmap Cache. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct globals::bitmap_cache {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "bitmap_cache"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct globals::glyph_cache {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "glyph_cache"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: unsigned int <br/>
    /// value{3389} <br/>
    struct globals::port {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "port"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{3389};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct globals::nomouse {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "nomouse"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct globals::notimestamp {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "notimestamp"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: Level <br/>
    /// value{static_cast<type>(0)} <br/>
    struct globals::encryptionLevel {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "encryptionLevel"; }
        using type = Level;
        using sesman_and_spec_type = Level;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(0)};
    };
    /// type: std::string <br/>
    /// value = REDEMPTION_CONFIG_AUTHFILE <br/>
    struct globals::authfile {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "authfile"; }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value = REDEMPTION_CONFIG_AUTHFILE;
    };
    /// Time out during RDP handshake stage. <br/>
    /// type: std::chrono::seconds <br/>
    /// value{10} <br/>
    struct globals::handshake_timeout {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "handshake_timeout"; }
        using type = std::chrono::seconds;
        using sesman_and_spec_type = std::chrono::seconds;
        using mapped_type = sesman_and_spec_type;
        type value{10};
    };
    /// No traffic auto disconnection. <br/>
    /// type: std::chrono::seconds <br/>
    /// value{900} <br/>
    struct globals::session_timeout {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "session_timeout"; }
        using type = std::chrono::seconds;
        using sesman_and_spec_type = std::chrono::seconds;
        using mapped_type = sesman_and_spec_type;
        type value{900};
    };
    /// No traffic auto disconnection. <br/>
    /// AUTHID_GLOBALS_INACTIVITY_TIMEOUT <br/>
    /// type: std::chrono::seconds <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct globals::inactivity_timeout {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "inactivity_timeout"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(11); }
        using type = std::chrono::seconds;
        using sesman_and_spec_type = std::chrono::seconds;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Keepalive. <br/>
    /// type: std::chrono::seconds <br/>
    /// value{30} <br/>
    struct globals::keepalive_grace_delay {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "keepalive_grace_delay"; }
        using type = std::chrono::seconds;
        using sesman_and_spec_type = std::chrono::seconds;
        using mapped_type = sesman_and_spec_type;
        type value{30};
    };
    /// Specifies the time to spend on the login screen of proxy RDP before closing client window (0 to desactivate). <br/>
    /// type: std::chrono::seconds <br/>
    /// value{120} <br/>
    struct globals::authentication_timeout {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "authentication_timeout"; }
        using type = std::chrono::seconds;
        using sesman_and_spec_type = std::chrono::seconds;
        using mapped_type = sesman_and_spec_type;
        type value{120};
    };
    /// Specifies the time to spend on the close box of proxy RDP before closing client window (0 to desactivate). <br/>
    /// type: std::chrono::seconds <br/>
    /// value{600} <br/>
    struct globals::close_timeout {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "close_timeout"; }
        using type = std::chrono::seconds;
        using sesman_and_spec_type = std::chrono::seconds;
        using mapped_type = sesman_and_spec_type;
        type value{600};
    };
    /// AUTHID_GLOBALS_TRACE_TYPE <br/>
    /// type: TraceType <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(1)} <br/>
    struct globals::trace_type {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "trace_type"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(12); }
        using type = TraceType;
        using sesman_and_spec_type = TraceType;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// type: std::string <br/>
    /// value = "0.0.0.0" <br/>
    struct globals::listen_address {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "listen_address"; }
        using type = std::string;
        using sesman_and_spec_type = ::configs::spec_types::ip;
        using mapped_type = sesman_and_spec_type;
        type value = "0.0.0.0";
    };
    /// Allow Transparent mode. <br/>
    /// type: bool <br/>
    /// value{0} <br/>
    struct globals::enable_transparent_mode {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "enable_transparent_mode"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Proxy certificate password. <br/>
    /// type: char[255] <br/>
    /// value = "inquisition" <br/>
    struct globals::certificate_password {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "certificate_password"; }
        using type = char[255];
        using sesman_and_spec_type = ::configs::spec_types::fixed_string;
        using mapped_type = sesman_and_spec_type;
        type value = "inquisition";
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// value = app_path(AppPath::Png) <br/>
    struct globals::png_path {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "png_path"; }
        using type = ::configs::spec_types::directory_path;
        using sesman_and_spec_type = ::configs::spec_types::directory_path;
        using mapped_type = sesman_and_spec_type;
        type value = app_path(AppPath::Png);
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// value = app_path(AppPath::Wrm) <br/>
    struct globals::wrm_path {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "wrm_path"; }
        using type = ::configs::spec_types::directory_path;
        using sesman_and_spec_type = ::configs::spec_types::directory_path;
        using mapped_type = sesman_and_spec_type;
        type value = app_path(AppPath::Wrm);
    };
    /// AUTHID_GLOBALS_IS_REC <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct globals::is_rec {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "is_rec"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(13); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_GLOBALS_MOVIE_PATH <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct globals::movie_path {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "movie_path"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(14); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// Support of Bitmap Update. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct globals::enable_bitmap_update {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "enable_bitmap_update"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Show close screen. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct globals::enable_close_box {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "enable_close_box"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// type: bool <br/>
    /// value{1} <br/>
    struct globals::enable_osd {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "enable_osd"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// type: bool <br/>
    /// value{1} <br/>
    struct globals::enable_osd_display_remote_target {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "enable_osd_display_remote_target"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// value = app_path(AppPath::Persistent) <br/>
    struct globals::persistent_path {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "persistent_path"; }
        using type = ::configs::spec_types::directory_path;
        using sesman_and_spec_type = ::configs::spec_types::directory_path;
        using mapped_type = sesman_and_spec_type;
        type value = app_path(AppPath::Persistent);
    };
    /// type: bool <br/>
    /// value = REDEMPTION_CONFIG_ENABLE_WAB_INTEGRATION <br/>
    struct globals::enable_wab_integration {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "enable_wab_integration"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value = REDEMPTION_CONFIG_ENABLE_WAB_INTEGRATION;
    };
    /// type: bool <br/>
    /// value{1} <br/>
    struct globals::allow_using_multiple_monitors {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "allow_using_multiple_monitors"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Needed to refresh screen of Windows Server 2012. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct globals::bogus_refresh_rect {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "bogus_refresh_rect"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// type: std::string <br/>
    /// value = "flv" <br/>
    struct globals::codec_id {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "codec_id"; }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value = "flv";
    };
    /// type: Level <br/>
    /// value{static_cast<type>(2)} <br/>
    struct globals::video_quality {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "video_quality"; }
        using type = Level;
        using sesman_and_spec_type = Level;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(2)};
    };
    /// type: bool <br/>
    /// value{1} <br/>
    struct globals::large_pointer_support {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "large_pointer_support"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_GLOBALS_UNICODE_KEYBOARD_EVENT_SUPPORT <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct globals::unicode_keyboard_event_support {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "unicode_keyboard_event_support"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(15); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_GLOBALS_MOD_RECV_TIMEOUT <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{1000} <br/>
    struct globals::mod_recv_timeout {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "mod_recv_timeout"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(16); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = ::configs::spec_types::range<std::chrono::milliseconds, 100, 10000>;
        using mapped_type = sesman_and_spec_type;
        type value{1000};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct globals::spark_view_specific_glyph_width {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "spark_view_specific_glyph_width"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct globals::experimental_enable_serializer_data_block_size_limit {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "experimental_enable_serializer_data_block_size_limit"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct globals::experimental_support_resize_session_during_recording {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "globals"; }
        static constexpr char const * name() { return "experimental_support_resize_session_during_recording"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };

    /// type: bool <br/>
    /// value{1} <br/>
    struct session_log::enable_session_log {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "session_log"; }
        static constexpr char const * name() { return "enable_session_log"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_SESSION_LOG_LOG_PATH <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct session_log::log_path {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "session_log"; }
        static constexpr char const * name() { return "log_path"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(17); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: KeyboardInputMaskingLevel <br/>
    /// value{static_cast<type>(2)} <br/>
    struct session_log::keyboard_input_masking_level {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "session_log"; }
        static constexpr char const * name() { return "keyboard_input_masking_level"; }
        using type = KeyboardInputMaskingLevel;
        using sesman_and_spec_type = KeyboardInputMaskingLevel;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(2)};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct session_log::hide_non_printable_kbd_input {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "session_log"; }
        static constexpr char const * name() { return "hide_non_printable_kbd_input"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };

    /// AUTHID_CLIENT_KEYBOARD_LAYOUT <br/>
    /// type: unsigned int <br/>
    /// sesman <- proxy <br/>
    /// value{0} <br/>
    struct client::keyboard_layout {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "keyboard_layout"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(18); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// cs-CZ, da-DK, de-DE, el-GR, en-US, es-ES, fi-FI.finnish, fr-FR, is-IS, it-IT, nl-NL, nb-NO, pl-PL.programmers, pt-BR.abnt, ro-RO, ru-RU, hr-HR, sk-SK, sv-SE, tr-TR.q, uk-UA, sl-SI, et-EE, lv-LV, lt-LT.ibm, mk-MK, fo-FO, mt-MT.47, se-NO, kk-KZ, ky-KG, tt-RU, mn-MN, cy-GB, lb-LU, mi-NZ, de-CH, en-GB, es-MX, fr-BE.fr, nl-BE, pt-PT, sr-La, se-SE, uz-Cy, iu-La, fr-CA, sr-Cy, en-CA.fr, fr-CH, bs-Cy, bg-BG.latin, cs-CZ.qwerty, en-IE.irish, de-DE.ibm, el-GR.220, es-ES.variation, hu-HU, en-US.dvorak, it-IT.142, pl-PL, pt-BR.abnt2, ru-RU.typewriter, sk-SK.qwerty, tr-TR.f, lv-LV.qwerty, lt-LT, mt-MT.48, se-NO.ext_norway, fr-BE, se-SE, en-CA.multilingual, en-IE, cs-CZ.programmers, el-GR.319, en-US.international, se-SE.ext_finland_sweden, bg-BG, el-GR.220_latin, en-US.dvorak_left, el-GR.319_latin, en-US.dvorak_right, el-GR.latin, el-GR.polytonic <br/>
    /// type: std::string <br/>
    /// value = "en-US, fr-FR, de-DE, ru-RU" <br/>
    struct client::keyboard_layout_proposals {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "keyboard_layout_proposals"; }
        using type = std::string;
        using sesman_and_spec_type = ::configs::spec_types::list<std::string>;
        using mapped_type = sesman_and_spec_type;
        type value = "en-US, fr-FR, de-DE, ru-RU";
    };
    /// If true, ignore password provided by RDP client, user need do login manually. <br/>
    /// type: bool <br/>
    /// value{0} <br/>
    struct client::ignore_logon_password {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "ignore_logon_password"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Enable font smoothing (0x80). <br/>
    /// type: uint32_t <br/>
    /// value{128} <br/>
    struct client::performance_flags_default {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "performance_flags_default"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{128};
    };
    /// Disable theme (0x8). <br/>
    /// Disable mouse cursor shadows (0x20). <br/>
    /// type: uint32_t <br/>
    /// value{40} <br/>
    struct client::performance_flags_force_present {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "performance_flags_force_present"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{40};
    };
    /// type: uint32_t <br/>
    /// value{0} <br/>
    struct client::performance_flags_force_not_present {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "performance_flags_force_not_present"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// If enabled, avoid automatically font smoothing in recorded session. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct client::auto_adjust_performance_flags {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "auto_adjust_performance_flags"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Fallback to RDP Legacy Encryption if client does not support TLS. <br/>
    /// type: bool <br/>
    /// value{0} <br/>
    struct client::tls_fallback_legacy {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "tls_fallback_legacy"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{1} <br/>
    struct client::tls_support {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "tls_support"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Needed to connect with jrdp, based on bogus X224 layer code. <br/>
    /// type: bool <br/>
    /// value{0} <br/>
    struct client::bogus_neg_request {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "bogus_neg_request"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Needed to connect with Remmina 0.8.3 and freerdp 0.9.4, based on bogus MCS layer code. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct client::bogus_user_id {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "bogus_user_id"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// If enabled, ignore CTRL+ALT+DEL and CTRL+SHIFT+ESCAPE (or the equivalents) keyboard sequences. <br/>
    /// AUTHID_CLIENT_DISABLE_TSK_SWITCH_SHORTCUTS <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct client::disable_tsk_switch_shortcuts {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "disable_tsk_switch_shortcuts"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(19); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: RdpCompression <br/>
    /// value{static_cast<type>(4)} <br/>
    struct client::rdp_compression {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "rdp_compression"; }
        using type = RdpCompression;
        using sesman_and_spec_type = RdpCompression;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(4)};
    };
    /// type: ColorDepth <br/>
    /// value{static_cast<type>(24)} <br/>
    struct client::max_color_depth {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "max_color_depth"; }
        using type = ColorDepth;
        using sesman_and_spec_type = ColorDepth;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(24)};
    };
    /// Persistent Disk Bitmap Cache on the front side. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct client::persistent_disk_bitmap_cache {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "persistent_disk_bitmap_cache"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Support of Cache Waiting List (this value is ignored if Persistent Disk Bitmap Cache is disabled). <br/>
    /// type: bool <br/>
    /// value{0} <br/>
    struct client::cache_waiting_list {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "cache_waiting_list"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// If enabled, the contents of Persistent Bitmap Caches are stored on disk. <br/>
    /// type: bool <br/>
    /// value{0} <br/>
    struct client::persist_bitmap_cache_on_disk {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "persist_bitmap_cache_on_disk"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Support of Bitmap Compression. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct client::bitmap_compression {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "bitmap_compression"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Enables support of Clent Fast-Path Input Event PDUs. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct client::fast_path {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "fast_path"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// type: bool <br/>
    /// value{1} <br/>
    struct client::enable_suppress_output {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "enable_suppress_output"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// [Not configured]: Compatible with more RDP clients (less secure) <br/>
    /// HIGH:!ADH:!3DES: Compatible only with MS Windows 7 client or more recent (moderately secure)HIGH:!ADH:!3DES:!SHA: Compatible only with MS Server Windows 2008 R2 client or more recent (more secure) <br/>
    /// type: std::string <br/>
    /// value = "HIGH:!ADH:!3DES:!SHA" <br/>
    struct client::ssl_cipher_list {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "ssl_cipher_list"; }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value = "HIGH:!ADH:!3DES:!SHA";
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct client::show_target_user_in_f12_message {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "show_target_user_in_f12_message"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct client::enable_new_pointer_update {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "enable_new_pointer_update"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{1} <br/>
    struct client::bogus_ios_glyph_support_level {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "bogus_ios_glyph_support_level"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct client::transform_glyph_to_bitmap {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "transform_glyph_to_bitmap"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: BogusNumberOfFastpathInputEvent <br/>
    /// value{static_cast<type>(1)} <br/>
    struct client::bogus_number_of_fastpath_input_event {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "bogus_number_of_fastpath_input_event"; }
        using type = BogusNumberOfFastpathInputEvent;
        using sesman_and_spec_type = BogusNumberOfFastpathInputEvent;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// type: std::chrono::milliseconds <br/>
    /// value{1000} <br/>
    struct client::recv_timeout {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "client"; }
        static constexpr char const * name() { return "recv_timeout"; }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = ::configs::spec_types::range<std::chrono::milliseconds, 100, 10000>;
        using mapped_type = sesman_and_spec_type;
        type value{1000};
    };

    /// type: RdpCompression <br/>
    /// value{static_cast<type>(4)} <br/>
    struct mod_rdp::rdp_compression {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "rdp_compression"; }
        using type = RdpCompression;
        using sesman_and_spec_type = RdpCompression;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(4)};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct mod_rdp::disconnect_on_logon_user_change {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "disconnect_on_logon_user_change"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: std::chrono::seconds <br/>
    /// value{0} <br/>
    struct mod_rdp::open_session_timeout {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "open_session_timeout"; }
        using type = std::chrono::seconds;
        using sesman_and_spec_type = std::chrono::seconds;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Enables support of additional drawing orders: <br/>
    ///   15: MultiDstBlt <br/>
    ///   16: MultiPatBlt <br/>
    ///   17: MultiScrBlt <br/>
    ///   18: MultiOpaqueRect <br/>
    ///   22: Polyline <br/>
    /// type: std::string <br/>
    /// value = "15,16,17,18,22" <br/>
    struct mod_rdp::extra_orders {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "extra_orders"; }
        using type = std::string;
        using sesman_and_spec_type = ::configs::spec_types::list<unsigned int>;
        using mapped_type = sesman_and_spec_type;
        type value = "15,16,17,18,22";
    };
    /// NLA authentication in secondary target. <br/>
    /// AUTHID_MOD_RDP_ENABLE_NLA <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct mod_rdp::enable_nla {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "enable_nla"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(20); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// If enabled, NLA authentication will try Kerberos before NTLM. <br/>
    /// (if enable_nla is disabled, this value is ignored). <br/>
    /// AUTHID_MOD_RDP_ENABLE_KERBEROS <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::enable_kerberos {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "enable_kerberos"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(21); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Persistent Disk Bitmap Cache on the mod side. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct mod_rdp::persistent_disk_bitmap_cache {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "persistent_disk_bitmap_cache"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Support of Cache Waiting List (this value is ignored if Persistent Disk Bitmap Cache is disabled). <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct mod_rdp::cache_waiting_list {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "cache_waiting_list"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// If enabled, the contents of Persistent Bitmap Caches are stored on disk. <br/>
    /// type: bool <br/>
    /// value{0} <br/>
    struct mod_rdp::persist_bitmap_cache_on_disk {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "persist_bitmap_cache_on_disk"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Enables channels names (example: channel1,channel2,etc). Character * only, activate all with low priority. <br/>
    /// type: std::string <br/>
    /// value = "*" <br/>
    struct mod_rdp::allow_channels {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "allow_channels"; }
        using type = std::string;
        using sesman_and_spec_type = ::configs::spec_types::list<std::string>;
        using mapped_type = sesman_and_spec_type;
        type value = "*";
    };
    /// Disable channels names (example: channel1,channel2,etc). Character * only, deactivate all with low priority. <br/>
    /// type: std::string <br/>
    /// value{} <br/>
    struct mod_rdp::deny_channels {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "deny_channels"; }
        using type = std::string;
        using sesman_and_spec_type = ::configs::spec_types::list<std::string>;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// Enables support of Client/Server Fast-Path Input/Update PDUs. <br/>
    /// Fast-Path is required for Windows Server 2012 (or more recent)! <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct mod_rdp::fast_path {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "fast_path"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Enables Server Redirection Support. <br/>
    /// AUTHID_MOD_RDP_SERVER_REDIRECTION_SUPPORT <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::server_redirection_support {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "server_redirection_support"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(22); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: RedirectionInfo <br/>
    /// value{} <br/>
    struct mod_rdp::redir_info {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "redir_info"; }
        using type = RedirectionInfo;
        using mapped_type = type;
        type value{};
    };
    /// AUTHID_MOD_RDP_LOAD_BALANCE_INFO <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct mod_rdp::load_balance_info {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "load_balance_info"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(23); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// Needed to connect with VirtualBox, based on bogus TS_UD_SC_NET data block. <br/>
    /// AUTHID_MOD_RDP_BOGUS_SC_NET_SIZE <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct mod_rdp::bogus_sc_net_size {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "bogus_sc_net_size"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(24); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// type: BogusLinuxCursor <br/>
    /// value{static_cast<type>(2)} <br/>
    struct mod_rdp::bogus_linux_cursor {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "bogus_linux_cursor"; }
        using type = BogusLinuxCursor;
        using sesman_and_spec_type = BogusLinuxCursor;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(2)};
    };
    /// AUTHID_MOD_RDP_PROXY_MANAGED_DRIVES <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct mod_rdp::proxy_managed_drives {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "proxy_managed_drives"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(25); }
        using type = std::string;
        using sesman_and_spec_type = ::configs::spec_types::list<std::string>;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_MOD_RDP_IGNORE_AUTH_CHANNEL <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::ignore_auth_channel {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "ignore_auth_channel"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(26); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Authentication channel used by Auto IT scripts. May be '*' to use default name. Keep empty to disable virtual channel. <br/>
    /// type: char[8] <br/>
    /// value = "*" <br/>
    struct mod_rdp::auth_channel {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "auth_channel"; }
        using type = char[8];
        using sesman_and_spec_type = ::configs::spec_types::fixed_string;
        using mapped_type = sesman_and_spec_type;
        type value = "*";
    };
    /// Authentication channel used by other scripts. No default name. Keep empty to disable virtual channel. <br/>
    /// type: char[8] <br/>
    /// value = "" <br/>
    struct mod_rdp::checkout_channel {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "checkout_channel"; }
        using type = char[8];
        using sesman_and_spec_type = ::configs::spec_types::fixed_string;
        using mapped_type = sesman_and_spec_type;
        type value = "";
    };
    /// AUTHID_MOD_RDP_ALTERNATE_SHELL <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct mod_rdp::alternate_shell {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "alternate_shell"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(27); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_MOD_RDP_SHELL_ARGUMENTS <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct mod_rdp::shell_arguments {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "shell_arguments"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(28); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_MOD_RDP_SHELL_WORKING_DIRECTORY <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct mod_rdp::shell_working_directory {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "shell_working_directory"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(29); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_MOD_RDP_USE_CLIENT_PROVIDED_ALTERNATE_SHELL <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::use_client_provided_alternate_shell {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "use_client_provided_alternate_shell"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(30); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_MOD_RDP_USE_CLIENT_PROVIDED_REMOTEAPP <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::use_client_provided_remoteapp {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "use_client_provided_remoteapp"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(31); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_MOD_RDP_USE_NATIVE_REMOTEAPP_CAPABILITY <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct mod_rdp::use_native_remoteapp_capability {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "use_native_remoteapp_capability"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(32); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_MOD_RDP_ENABLE_SESSION_PROBE <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::enable_session_probe {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "enable_session_probe"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(33); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Minimum supported server : Windows Server 2008. <br/>
    /// Clipboard redirection should be remain enabled on Terminal Server. <br/>
    /// AUTHID_MOD_RDP_SESSION_PROBE_USE_CLIPBOARD_BASED_LAUNCHER <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct mod_rdp::session_probe_use_clipboard_based_launcher {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_use_clipboard_based_launcher"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(34); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_ENABLE_LAUNCH_MASK <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct mod_rdp::session_probe_enable_launch_mask {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_enable_launch_mask"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(35); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_ON_LAUNCH_FAILURE <br/>
    /// type: SessionProbeOnLaunchFailure <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(2)} <br/>
    struct mod_rdp::session_probe_on_launch_failure {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_on_launch_failure"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(36); }
        using type = SessionProbeOnLaunchFailure;
        using sesman_and_spec_type = SessionProbeOnLaunchFailure;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(2)};
    };
    /// This parameter is used if session_probe_on_launch_failure is 1 (disconnect user). <br/>
    /// 0 to disable timeout. <br/>
    /// AUTHID_MOD_RDP_SESSION_PROBE_LAUNCH_TIMEOUT <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{20000} <br/>
    struct mod_rdp::session_probe_launch_timeout {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_launch_timeout"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(37); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{20000};
    };
    /// This parameter is used if session_probe_on_launch_failure is 0 (ignore failure and continue) or 2 (reconnect without Session Probe). <br/>
    /// 0 to disable timeout. <br/>
    /// AUTHID_MOD_RDP_SESSION_PROBE_LAUNCH_FALLBACK_TIMEOUT <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{7000} <br/>
    struct mod_rdp::session_probe_launch_fallback_timeout {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_launch_fallback_timeout"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(38); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{7000};
    };
    /// Minimum supported server : Windows Server 2008. <br/>
    /// AUTHID_MOD_RDP_SESSION_PROBE_START_LAUNCH_TIMEOUT_TIMER_ONLY_AFTER_LOGON <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct mod_rdp::session_probe_start_launch_timeout_timer_only_after_logon {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_start_launch_timeout_timer_only_after_logon"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(39); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_KEEPALIVE_TIMEOUT <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{5000} <br/>
    struct mod_rdp::session_probe_keepalive_timeout {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_keepalive_timeout"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(40); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{5000};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_ON_KEEPALIVE_TIMEOUT <br/>
    /// type: SessionProbeOnKeepaliveTimeout <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(1)} <br/>
    struct mod_rdp::session_probe_on_keepalive_timeout {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_on_keepalive_timeout"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(41); }
        using type = SessionProbeOnKeepaliveTimeout;
        using sesman_and_spec_type = SessionProbeOnKeepaliveTimeout;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// End automatically a disconnected session <br/>
    /// AUTHID_MOD_RDP_SESSION_PROBE_END_DISCONNECTED_SESSION <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::session_probe_end_disconnected_session {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_end_disconnected_session"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(42); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct mod_rdp::session_probe_customize_executable_name {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_customize_executable_name"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_ENABLE_LOG <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::session_probe_enable_log {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_enable_log"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(43); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_ENABLE_LOG_ROTATION <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct mod_rdp::session_probe_enable_log_rotation {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_enable_log_rotation"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(44); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// This policy setting allows you to configure a time limit for disconnected application sessions. <br/>
    /// 0 to disable timeout. <br/>
    /// AUTHID_MOD_RDP_SESSION_PROBE_DISCONNECTED_APPLICATION_LIMIT <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::session_probe_disconnected_application_limit {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_disconnected_application_limit"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(45); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// This policy setting allows you to configure a time limit for disconnected Terminal Services sessions. <br/>
    /// 0 to disable timeout. <br/>
    /// AUTHID_MOD_RDP_SESSION_PROBE_DISCONNECTED_SESSION_LIMIT <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::session_probe_disconnected_session_limit {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_disconnected_session_limit"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(46); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// This parameter allows you to specify the maximum amount of time that an active Terminal Services session can be idle (without user input) before it is automatically locked by Session Probe. <br/>
    /// 0 to disable timeout. <br/>
    /// AUTHID_MOD_RDP_SESSION_PROBE_IDLE_SESSION_LIMIT <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::session_probe_idle_session_limit {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_idle_session_limit"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(47); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: char[512] <br/>
    /// value = "||CMD" <br/>
    struct mod_rdp::session_probe_exe_or_file {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_exe_or_file"; }
        using type = char[512];
        using sesman_and_spec_type = ::configs::spec_types::fixed_string;
        using mapped_type = sesman_and_spec_type;
        type value = "||CMD";
    };
    /// type: char[512] <br/>
    /// value = REDEMPTION_CONFIG_SESSION_PROBE_ARGUMENTS <br/>
    struct mod_rdp::session_probe_arguments {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_arguments"; }
        using type = char[512];
        using sesman_and_spec_type = ::configs::spec_types::fixed_string;
        using mapped_type = sesman_and_spec_type;
        type value = REDEMPTION_CONFIG_SESSION_PROBE_ARGUMENTS;
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_CLIPBOARD_BASED_LAUNCHER_CLIPBOARD_INITIALIZATION_DELAY <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{2000} <br/>
    struct mod_rdp::session_probe_clipboard_based_launcher_clipboard_initialization_delay {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_clipboard_based_launcher_clipboard_initialization_delay"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(48); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{2000};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_CLIPBOARD_BASED_LAUNCHER_START_DELAY <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{2000} <br/>
    struct mod_rdp::session_probe_clipboard_based_launcher_start_delay {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_clipboard_based_launcher_start_delay"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(49); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{2000};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_CLIPBOARD_BASED_LAUNCHER_LONG_DELAY <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{500} <br/>
    struct mod_rdp::session_probe_clipboard_based_launcher_long_delay {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_clipboard_based_launcher_long_delay"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(50); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{500};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_CLIPBOARD_BASED_LAUNCHER_SHORT_DELAY <br/>
    /// type: std::chrono::milliseconds <br/>
    /// sesman -> proxy <br/>
    /// value{50} <br/>
    struct mod_rdp::session_probe_clipboard_based_launcher_short_delay {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_clipboard_based_launcher_short_delay"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(51); }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{50};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct mod_rdp::session_probe_allow_multiple_handshake {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_allow_multiple_handshake"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_ENABLE_CRASH_DUMP <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::session_probe_enable_crash_dump {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_enable_crash_dump"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(52); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_HANDLE_USAGE_LIMIT <br/>
    /// type: uint32_t <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::session_probe_handle_usage_limit {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_handle_usage_limit"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(53); }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_MOD_RDP_SESSION_PROBE_MEMORY_USAGE_LIMIT <br/>
    /// type: uint32_t <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_rdp::session_probe_memory_usage_limit {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "session_probe_memory_usage_limit"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(54); }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Keep known server certificates on WAB <br/>
    /// AUTHID_MOD_RDP_SERVER_CERT_STORE <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct mod_rdp::server_cert_store {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "server_cert_store"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(55); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_MOD_RDP_SERVER_CERT_CHECK <br/>
    /// type: ServerCertCheck <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(1)} <br/>
    struct mod_rdp::server_cert_check {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "server_cert_check"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(56); }
        using type = ServerCertCheck;
        using sesman_and_spec_type = ServerCertCheck;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// Warn if check allow connexion to server. <br/>
    /// AUTHID_MOD_RDP_SERVER_ACCESS_ALLOWED_MESSAGE <br/>
    /// type: ServerNotification <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(1)} <br/>
    struct mod_rdp::server_access_allowed_message {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "server_access_allowed_message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(57); }
        using type = ServerNotification;
        using sesman_and_spec_type = ServerNotification;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// Warn that new server certificate file was created. <br/>
    /// AUTHID_MOD_RDP_SERVER_CERT_CREATE_MESSAGE <br/>
    /// type: ServerNotification <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(1)} <br/>
    struct mod_rdp::server_cert_create_message {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "server_cert_create_message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(58); }
        using type = ServerNotification;
        using sesman_and_spec_type = ServerNotification;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// Warn that server certificate file was successfully checked. <br/>
    /// AUTHID_MOD_RDP_SERVER_CERT_SUCCESS_MESSAGE <br/>
    /// type: ServerNotification <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(1)} <br/>
    struct mod_rdp::server_cert_success_message {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "server_cert_success_message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(59); }
        using type = ServerNotification;
        using sesman_and_spec_type = ServerNotification;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// Warn that server certificate file checking failed. <br/>
    /// AUTHID_MOD_RDP_SERVER_CERT_FAILURE_MESSAGE <br/>
    /// type: ServerNotification <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(1)} <br/>
    struct mod_rdp::server_cert_failure_message {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "server_cert_failure_message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(60); }
        using type = ServerNotification;
        using sesman_and_spec_type = ServerNotification;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// Warn that server certificate check raised some internal error. <br/>
    /// AUTHID_MOD_RDP_SERVER_CERT_ERROR_MESSAGE <br/>
    /// type: ServerNotification <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(1)} <br/>
    struct mod_rdp::server_cert_error_message {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "server_cert_error_message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(61); }
        using type = ServerNotification;
        using sesman_and_spec_type = ServerNotification;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// Do not transmit client machine name or RDP server. <br/>
    /// type: bool <br/>
    /// value{0} <br/>
    struct mod_rdp::hide_client_name {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "hide_client_name"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct mod_rdp::clean_up_32_bpp_cursor {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "clean_up_32_bpp_cursor"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{1} <br/>
    struct mod_rdp::bogus_ios_rdpdr_virtual_channel {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "bogus_ios_rdpdr_virtual_channel"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_MOD_RDP_ENABLE_RDPDR_DATA_ANALYSIS <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct mod_rdp::enable_rdpdr_data_analysis {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "enable_rdpdr_data_analysis"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(62); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Delay before automatically bypass Windows's Legal Notice screen in RemoteApp mode. <br/>
    /// Set to 0 to disable this feature. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// value{0} <br/>
    struct mod_rdp::remoteapp_bypass_legal_notice_delay {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "remoteapp_bypass_legal_notice_delay"; }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// Time limit to automatically bypass Windows's Legal Notice screen in RemoteApp mode. <br/>
    /// Set to 0 to disable this feature. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// value{20000} <br/>
    struct mod_rdp::remoteapp_bypass_legal_notice_timeout {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "remoteapp_bypass_legal_notice_timeout"; }
        using type = std::chrono::milliseconds;
        using sesman_and_spec_type = std::chrono::milliseconds;
        using mapped_type = sesman_and_spec_type;
        type value{20000};
    };
    /// type: bool <br/>
    /// value{1} <br/>
    struct mod_rdp::experimental_fix_input_event_sync {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_rdp"; }
        static constexpr char const * name() { return "experimental_fix_input_event_sync"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };

    /// type: bool <br/>
    /// value{0} <br/>
    struct metrics::enable_rdp_metrics {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "metrics"; }
        static constexpr char const * name() { return "enable_rdp_metrics"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct metrics::enable_vnc_metrics {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "metrics"; }
        static constexpr char const * name() { return "enable_vnc_metrics"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// value = app_path(AppPath::Metrics) <br/>
    struct metrics::log_dir_path {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "metrics"; }
        static constexpr char const * name() { return "log_dir_path"; }
        using type = ::configs::spec_types::directory_path;
        using sesman_and_spec_type = ::configs::spec_types::directory_path;
        using mapped_type = sesman_and_spec_type;
        type value = app_path(AppPath::Metrics);
    };
    /// type: std::chrono::seconds <br/>
    /// value{5} <br/>
    struct metrics::log_interval {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "metrics"; }
        static constexpr char const * name() { return "log_interval"; }
        using type = std::chrono::seconds;
        using sesman_and_spec_type = std::chrono::seconds;
        using mapped_type = sesman_and_spec_type;
        type value{5};
    };
    /// type: std::chrono::hours <br/>
    /// value{24} <br/>
    struct metrics::log_file_turnover_interval {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "metrics"; }
        static constexpr char const * name() { return "log_file_turnover_interval"; }
        using type = std::chrono::hours;
        using sesman_and_spec_type = std::chrono::hours;
        using mapped_type = sesman_and_spec_type;
        type value{24};
    };
    /// signature key to digest log metrics header info <br/>
    /// type: std::string <br/>
    /// value = "" <br/>
    struct metrics::sign_key {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "metrics"; }
        static constexpr char const * name() { return "sign_key"; }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value = "";
    };

    /// Enable or disable the clipboard from client (client to server). <br/>
    /// AUTHID_MOD_VNC_CLIPBOARD_UP <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct mod_vnc::clipboard_up {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_vnc"; }
        static constexpr char const * name() { return "clipboard_up"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(63); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// Enable or disable the clipboard from server (server to client). <br/>
    /// AUTHID_MOD_VNC_CLIPBOARD_DOWN <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct mod_vnc::clipboard_down {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_vnc"; }
        static constexpr char const * name() { return "clipboard_down"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(64); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// Sets the encoding types in which pixel data can be sent by the VNC server: <br/>
    ///   0: Raw <br/>
    ///   1: CopyRect <br/>
    ///   2: RRE <br/>
    ///   16: ZRLE <br/>
    ///   -239 (0xFFFFFF11): Cursor pseudo-encoding <br/>
    /// type: std::string <br/>
    /// value{} <br/>
    struct mod_vnc::encodings {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_vnc"; }
        static constexpr char const * name() { return "encodings"; }
        using type = std::string;
        using sesman_and_spec_type = ::configs::spec_types::list<int>;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct mod_vnc::allow_authentification_retries {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_vnc"; }
        static constexpr char const * name() { return "allow_authentification_retries"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// VNC server clipboard data encoding type. <br/>
    /// AUTHID_MOD_VNC_SERVER_CLIPBOARD_ENCODING_TYPE <br/>
    /// type: ClipboardEncodingType <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(1)} <br/>
    struct mod_vnc::server_clipboard_encoding_type {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_vnc"; }
        static constexpr char const * name() { return "server_clipboard_encoding_type"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(65); }
        using type = ClipboardEncodingType;
        using sesman_and_spec_type = ClipboardEncodingType;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// AUTHID_MOD_VNC_BOGUS_CLIPBOARD_INFINITE_LOOP <br/>
    /// type: VncBogusClipboardInfiniteLoop <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(0)} <br/>
    struct mod_vnc::bogus_clipboard_infinite_loop {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_vnc"; }
        static constexpr char const * name() { return "bogus_clipboard_infinite_loop"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(66); }
        using type = VncBogusClipboardInfiniteLoop;
        using sesman_and_spec_type = VncBogusClipboardInfiniteLoop;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(0)};
    };
    /// AUTHID_MOD_VNC_SERVER_IS_APPLE <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_vnc::server_is_apple {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_vnc"; }
        static constexpr char const * name() { return "server_is_apple"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(67); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };

    /// 0 - Wait for Escape, 1 - End session <br/>
    /// type: bool <br/>
    /// value{0} <br/>
    struct mod_replay::on_end_of_data {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_replay"; }
        static constexpr char const * name() { return "on_end_of_data"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// 0 - replay once, 1 - loop replay <br/>
    /// AUTHID_MOD_REPLAY_REPLAY_ON_LOOP <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct mod_replay::replay_on_loop {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "mod_replay"; }
        static constexpr char const * name() { return "replay_on_loop"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(68); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };

    /// type: OcrVersion <br/>
    /// value{static_cast<type>(2)} <br/>
    struct ocr::version {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "ocr"; }
        static constexpr char const * name() { return "version"; }
        using type = OcrVersion;
        using sesman_and_spec_type = OcrVersion;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(2)};
    };
    /// type: OcrLocale <br/>
    /// value{static_cast<type>(0)} <br/>
    struct ocr::locale {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "ocr"; }
        static constexpr char const * name() { return "locale"; }
        using type = OcrLocale;
        using sesman_and_spec_type = OcrLocale;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(0)};
    };
    /// type: std::chrono::duration<unsigned, std::ratio<1, 100>> <br/>
    /// value{100} <br/>
    struct ocr::interval {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "ocr"; }
        static constexpr char const * name() { return "interval"; }
        using type = std::chrono::duration<unsigned, std::ratio<1, 100>>;
        using sesman_and_spec_type = std::chrono::duration<unsigned, std::ratio<1, 100>>;
        using mapped_type = sesman_and_spec_type;
        type value{100};
    };
    /// type: bool <br/>
    /// value{1} <br/>
    struct ocr::on_title_bar_only {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "ocr"; }
        static constexpr char const * name() { return "on_title_bar_only"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Expressed in percentage, <br/>
    ///   0   - all of characters need be recognized <br/>
    ///   100 - accept all results <br/>
    /// type: unsigned int <br/>
    /// value{40} <br/>
    struct ocr::max_unrecog_char_rate {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "ocr"; }
        static constexpr char const * name() { return "max_unrecog_char_rate"; }
        using type = unsigned int;
        using sesman_and_spec_type = ::configs::spec_types::range<unsigned int, 0, 100>;
        using mapped_type = sesman_and_spec_type;
        type value{40};
    };

    /// type: unsigned int <br/>
    /// value{33} <br/>
    struct video::capture_groupid {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "capture_groupid"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{33};
    };
    /// type: CaptureFlags <br/>
    /// value{static_cast<type>(11)} <br/>
    struct video::capture_flags {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "capture_flags"; }
        using type = CaptureFlags;
        using sesman_and_spec_type = CaptureFlags;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(11)};
    };
    /// Frame interval. <br/>
    /// type: std::chrono::duration<unsigned, std::ratio<1, 10>> <br/>
    /// value{10} <br/>
    struct video::png_interval {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "png_interval"; }
        using type = std::chrono::duration<unsigned, std::ratio<1, 10>>;
        using sesman_and_spec_type = std::chrono::duration<unsigned, std::ratio<1, 10>>;
        using mapped_type = sesman_and_spec_type;
        type value{10};
    };
    /// Frame interval. <br/>
    /// type: std::chrono::duration<unsigned, std::ratio<1, 100>> <br/>
    /// value{40} <br/>
    struct video::frame_interval {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "frame_interval"; }
        using type = std::chrono::duration<unsigned, std::ratio<1, 100>>;
        using sesman_and_spec_type = std::chrono::duration<unsigned, std::ratio<1, 100>>;
        using mapped_type = sesman_and_spec_type;
        type value{40};
    };
    /// Time between 2 wrm movies. <br/>
    /// type: std::chrono::seconds <br/>
    /// value{600} <br/>
    struct video::break_interval {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "break_interval"; }
        using type = std::chrono::seconds;
        using sesman_and_spec_type = std::chrono::seconds;
        using mapped_type = sesman_and_spec_type;
        type value{600};
    };
    /// Number of png captures to keep. <br/>
    /// type: unsigned int <br/>
    /// value{5} <br/>
    struct video::png_limit {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "png_limit"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{5};
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// value = "/tmp/" <br/>
    struct video::replay_path {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "replay_path"; }
        using type = ::configs::spec_types::directory_path;
        using sesman_and_spec_type = ::configs::spec_types::directory_path;
        using mapped_type = sesman_and_spec_type;
        type value = "/tmp/";
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// value = app_path(AppPath::Hash) <br/>
    struct video::hash_path {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "hash_path"; }
        using type = ::configs::spec_types::directory_path;
        using sesman_and_spec_type = ::configs::spec_types::directory_path;
        using mapped_type = sesman_and_spec_type;
        type value = app_path(AppPath::Hash);
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// value = app_path(AppPath::RecordTmp) <br/>
    struct video::record_tmp_path {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "record_tmp_path"; }
        using type = ::configs::spec_types::directory_path;
        using sesman_and_spec_type = ::configs::spec_types::directory_path;
        using mapped_type = sesman_and_spec_type;
        type value = app_path(AppPath::RecordTmp);
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// value = app_path(AppPath::Record) <br/>
    struct video::record_path {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "record_path"; }
        using type = ::configs::spec_types::directory_path;
        using sesman_and_spec_type = ::configs::spec_types::directory_path;
        using mapped_type = sesman_and_spec_type;
        type value = app_path(AppPath::Record);
    };
    /// Disable keyboard log: <br/>
    /// type: KeyboardLogFlags <br/>
    /// value{static_cast<type>(1)} <br/>
    struct video::disable_keyboard_log {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "disable_keyboard_log"; }
        using type = KeyboardLogFlags;
        using sesman_and_spec_type = KeyboardLogFlags;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// Disable clipboard log: <br/>
    /// type: ClipboardLogFlags <br/>
    /// value{static_cast<type>(1)} <br/>
    struct video::disable_clipboard_log {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "disable_clipboard_log"; }
        using type = ClipboardLogFlags;
        using sesman_and_spec_type = ClipboardLogFlags;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// Disable (redirected) file system log: <br/>
    /// type: FileSystemLogFlags <br/>
    /// value{static_cast<type>(1)} <br/>
    struct video::disable_file_system_log {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "disable_file_system_log"; }
        using type = FileSystemLogFlags;
        using sesman_and_spec_type = FileSystemLogFlags;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// AUTHID_VIDEO_RT_DISPLAY <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct video::rt_display {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "rt_display"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(69); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: ColorDepthSelectionStrategy <br/>
    /// value{static_cast<type>(1)} <br/>
    struct video::wrm_color_depth_selection_strategy {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "wrm_color_depth_selection_strategy"; }
        using type = ColorDepthSelectionStrategy;
        using sesman_and_spec_type = ColorDepthSelectionStrategy;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// type: WrmCompressionAlgorithm <br/>
    /// value{static_cast<type>(1)} <br/>
    struct video::wrm_compression_algorithm {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "wrm_compression_algorithm"; }
        using type = WrmCompressionAlgorithm;
        using sesman_and_spec_type = WrmCompressionAlgorithm;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(1)};
    };
    /// type: std::chrono::seconds <br/>
    /// value{0} <br/>
    struct video::video_break_interval {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "video_break_interval"; }
        using type = std::chrono::seconds;
        using mapped_type = type;
        type value{0};
    };
    /// Needed to play a video with ffplay or VLC. <br/>
    /// Note: Useless with mpv and mplayer. <br/>
    /// type: bool <br/>
    /// value{1} <br/>
    struct video::bogus_vlc_frame_rate {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "bogus_vlc_frame_rate"; }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// Bitrate for low quality. <br/>
    /// type: unsigned int <br/>
    /// value{10000} <br/>
    struct video::l_bitrate {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "l_bitrate"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{10000};
    };
    /// Framerate for low quality. <br/>
    /// type: unsigned int <br/>
    /// value{5} <br/>
    struct video::l_framerate {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "l_framerate"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{5};
    };
    /// Height for low quality. <br/>
    /// type: unsigned int <br/>
    /// value{480} <br/>
    struct video::l_height {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "l_height"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{480};
    };
    /// Width for low quality. <br/>
    /// type: unsigned int <br/>
    /// value{640} <br/>
    struct video::l_width {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "l_width"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{640};
    };
    /// Qscale (parameter given to ffmpeg) for low quality. <br/>
    /// type: unsigned int <br/>
    /// value{28} <br/>
    struct video::l_qscale {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "l_qscale"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{28};
    };
    /// Bitrate for medium quality. <br/>
    /// type: unsigned int <br/>
    /// value{20000} <br/>
    struct video::m_bitrate {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "m_bitrate"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{20000};
    };
    /// Framerate for medium quality. <br/>
    /// type: unsigned int <br/>
    /// value{5} <br/>
    struct video::m_framerate {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "m_framerate"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{5};
    };
    /// Height for medium quality. <br/>
    /// type: unsigned int <br/>
    /// value{768} <br/>
    struct video::m_height {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "m_height"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{768};
    };
    /// Width for medium quality. <br/>
    /// type: unsigned int <br/>
    /// value{1024} <br/>
    struct video::m_width {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "m_width"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{1024};
    };
    /// Qscale (parameter given to ffmpeg) for medium quality. <br/>
    /// type: unsigned int <br/>
    /// value{14} <br/>
    struct video::m_qscale {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "m_qscale"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{14};
    };
    /// Bitrate for high quality. <br/>
    /// type: unsigned int <br/>
    /// value{30000} <br/>
    struct video::h_bitrate {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "h_bitrate"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{30000};
    };
    /// Framerate for high quality. <br/>
    /// type: unsigned int <br/>
    /// value{5} <br/>
    struct video::h_framerate {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "h_framerate"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{5};
    };
    /// Height for high quality. <br/>
    /// type: unsigned int <br/>
    /// value{2048} <br/>
    struct video::h_height {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "h_height"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{2048};
    };
    /// Width for high quality. <br/>
    /// type: unsigned int <br/>
    /// value{2048} <br/>
    struct video::h_width {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "h_width"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{2048};
    };
    /// Qscale (parameter given to ffmpeg) for high quality. <br/>
    /// type: unsigned int <br/>
    /// value{7} <br/>
    struct video::h_qscale {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "video"; }
        static constexpr char const * name() { return "h_qscale"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{7};
    };

    /// AUTHID_CRYPTO_KEY0 <br/>
    /// type: std::array<unsigned char, 32> <br/>
    /// sesman -> proxy <br/>
    /// value{{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, }} <br/>
    struct crypto::key0 {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "crypto"; }
        static constexpr char const * name() { return "key0"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(70); }
        using type = std::array<unsigned char, 32>;
        using sesman_and_spec_type = ::configs::spec_types::fixed_binary;
        using mapped_type = sesman_and_spec_type;
        type value{{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, }};
    };
    /// AUTHID_CRYPTO_KEY1 <br/>
    /// type: std::array<unsigned char, 32> <br/>
    /// sesman -> proxy <br/>
    /// value{{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, }} <br/>
    struct crypto::key1 {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "crypto"; }
        static constexpr char const * name() { return "key1"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(71); }
        using type = std::array<unsigned char, 32>;
        using sesman_and_spec_type = ::configs::spec_types::fixed_binary;
        using mapped_type = sesman_and_spec_type;
        type value{{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, }};
    };

    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::x224 {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "x224"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::mcs {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "mcs"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::sec {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "sec"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::rdp {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "rdp"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::primary_orders {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "primary_orders"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::secondary_orders {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "secondary_orders"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::bitmap_update {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "bitmap_update"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::bitmap {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "bitmap"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::capture {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "capture"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::auth {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "auth"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::session {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "session"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::front {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "front"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::mod_rdp {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "mod_rdp"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::mod_vnc {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "mod_vnc"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::mod_internal {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "mod_internal"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::mod_xup {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "mod_xup"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::widget {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "widget"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::input {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "input"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::password {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "password"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::compression {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "compression"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::cache {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "cache"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::performance {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "performance"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::pass_dialog_box {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "pass_dialog_box"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::ocr {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "ocr"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: uint32_t <br/>
    /// value{} <br/>
    struct debug::ffmpeg {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "ffmpeg"; }
        using type = uint32_t;
        using sesman_and_spec_type = uint32_t;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: unsigned int <br/>
    /// value{2} <br/>
    struct debug::config {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "debug"; }
        static constexpr char const * name() { return "config"; }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{2};
    };

    /// AUTHID_REMOTE_PROGRAM_ALLOW_RESIZE_HOSTED_DESKTOP <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct remote_program::allow_resize_hosted_desktop {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "remote_program"; }
        static constexpr char const * name() { return "allow_resize_hosted_desktop"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(72); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };

    /// AUTHID_TRANSLATION_LANGUAGE <br/>
    /// type: Language <br/>
    /// sesman -> proxy <br/>
    /// value{static_cast<type>(0)} <br/>
    struct translation::language {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "translation"; }
        static constexpr char const * name() { return "language"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(73); }
        using type = Language;
        using sesman_and_spec_type = Language;
        using mapped_type = sesman_and_spec_type;
        type value{static_cast<type>(0)};
    };
    /// AUTHID_TRANSLATION_PASSWORD_EN <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct translation::password_en {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "translation"; }
        static constexpr char const * name() { return "password_en"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(74); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_TRANSLATION_PASSWORD_FR <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct translation::password_fr {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "translation"; }
        static constexpr char const * name() { return "password_fr"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(75); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };

    /// type: std::string <br/>
    /// value{} <br/>
    struct internal_mod::theme {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "internal_mod"; }
        static constexpr char const * name() { return "theme"; }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };

    /// type: std::string <br/>
    /// value{} <br/>
    struct context::movie {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "movie"; }
        using type = std::string;
        using mapped_type = type;
        type value{};
    };
    /// AUTHID_CONTEXT_OPT_BITRATE <br/>
    /// type: unsigned int <br/>
    /// sesman -> proxy <br/>
    /// value{40000} <br/>
    struct context::opt_bitrate {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "opt_bitrate"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(76); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{40000};
    };
    /// AUTHID_CONTEXT_OPT_FRAMERATE <br/>
    /// type: unsigned int <br/>
    /// sesman -> proxy <br/>
    /// value{5} <br/>
    struct context::opt_framerate {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "opt_framerate"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(77); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{5};
    };
    /// AUTHID_CONTEXT_OPT_QSCALE <br/>
    /// type: unsigned int <br/>
    /// sesman -> proxy <br/>
    /// value{15} <br/>
    struct context::opt_qscale {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "opt_qscale"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(78); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{15};
    };
    /// AUTHID_CONTEXT_OPT_BPP <br/>
    /// type: unsigned int <br/>
    /// sesman <-> proxy <br/>
    /// value{24} <br/>
    struct context::opt_bpp {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "opt_bpp"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(79); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{24};
    };
    /// AUTHID_CONTEXT_OPT_HEIGHT <br/>
    /// type: unsigned int <br/>
    /// sesman <-> proxy <br/>
    /// value{600} <br/>
    struct context::opt_height {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "opt_height"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(80); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{600};
    };
    /// AUTHID_CONTEXT_OPT_WIDTH <br/>
    /// type: unsigned int <br/>
    /// sesman <-> proxy <br/>
    /// value{800} <br/>
    struct context::opt_width {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "opt_width"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(81); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{800};
    };
    /// type: std::string <br/>
    /// value{} <br/>
    struct context::auth_error_message {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_error_message"; }
        using type = std::string;
        using mapped_type = type;
        type value{};
    };
    /// AUTHID_CONTEXT_SELECTOR <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct context::selector {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "selector"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(82); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_CONTEXT_SELECTOR_CURRENT_PAGE <br/>
    /// type: unsigned int <br/>
    /// sesman <-> proxy <br/>
    /// value{1} <br/>
    struct context::selector_current_page {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "selector_current_page"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(83); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_CONTEXT_SELECTOR_DEVICE_FILTER <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::selector_device_filter {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "selector_device_filter"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(84); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_SELECTOR_GROUP_FILTER <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::selector_group_filter {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "selector_group_filter"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(85); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_SELECTOR_PROTO_FILTER <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::selector_proto_filter {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "selector_proto_filter"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(86); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_SELECTOR_LINES_PER_PAGE <br/>
    /// type: unsigned int <br/>
    /// sesman <-> proxy <br/>
    /// value{0} <br/>
    struct context::selector_lines_per_page {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "selector_lines_per_page"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(87); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_CONTEXT_SELECTOR_NUMBER_OF_PAGES <br/>
    /// type: unsigned int <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct context::selector_number_of_pages {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "selector_number_of_pages"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(88); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_CONTEXT_TARGET_PASSWORD <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::target_password {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "target_password"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(89); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_TARGET_HOST <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::target_host {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "target_host"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(90); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_TARGET_STR <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::target_str {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "target_str"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(91); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_TARGET_SERVICE <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::target_service {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "target_service"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(92); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_TARGET_PORT <br/>
    /// type: unsigned int <br/>
    /// sesman <-> proxy <br/>
    /// value{3389} <br/>
    struct context::target_port {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "target_port"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(93); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{3389};
    };
    /// AUTHID_CONTEXT_TARGET_PROTOCOL <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value = "RDP" <br/>
    struct context::target_protocol {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "target_protocol"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(94); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value = "RDP";
    };
    /// AUTHID_CONTEXT_PASSWORD <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::password {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "password"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(95); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_REPORTING <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::reporting {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "reporting"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(96); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_CHANNEL_ANSWER <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::auth_channel_answer {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_channel_answer"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(97); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_CHANNEL_TARGET <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::auth_channel_target {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_channel_target"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(98); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_MESSAGE <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::message {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(99); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_ACCEPT_MESSAGE <br/>
    /// type: bool <br/>
    /// sesman <- proxy <br/>
    /// value{} <br/>
    struct context::accept_message {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "accept_message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(100); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_DISPLAY_MESSAGE <br/>
    /// type: bool <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::display_message {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "display_message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(101); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_REJECTED <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::rejected {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "rejected"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(102); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTHENTICATED <br/>
    /// type: bool <br/>
    /// sesman <-> proxy <br/>
    /// value{0} <br/>
    struct context::authenticated {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "authenticated"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(103); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_CONTEXT_KEEPALIVE <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct context::keepalive {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "keepalive"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(104); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_CONTEXT_SESSION_ID <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::session_id {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "session_id"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(105); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_END_DATE_CNX <br/>
    /// type: unsigned int <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct context::end_date_cnx {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "end_date_cnx"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(106); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_CONTEXT_END_TIME <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::end_time {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "end_time"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(107); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_MODE_CONSOLE <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value = "allow" <br/>
    struct context::mode_console {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "mode_console"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(108); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value = "allow";
    };
    /// AUTHID_CONTEXT_TIMEZONE <br/>
    /// type: int <br/>
    /// sesman -> proxy <br/>
    /// value{-3600} <br/>
    struct context::timezone {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "timezone"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(109); }
        using type = int;
        using sesman_and_spec_type = int;
        using mapped_type = sesman_and_spec_type;
        type value{-3600};
    };
    /// AUTHID_CONTEXT_REAL_TARGET_DEVICE <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::real_target_device {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "real_target_device"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(110); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTHENTICATION_CHALLENGE <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::authentication_challenge {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "authentication_challenge"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(111); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_TICKET <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::ticket {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "ticket"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(112); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_COMMENT <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::comment {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "comment"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(113); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_DURATION <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::duration {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "duration"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(114); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_DURATION_MAX <br/>
    /// type: unsigned int <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct context::duration_max {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "duration_max"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(115); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_CONTEXT_WAITINFORETURN <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value{} <br/>
    struct context::waitinforeturn {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "waitinforeturn"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(116); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_SHOWFORM <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct context::showform {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "showform"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(117); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_CONTEXT_FORMFLAG <br/>
    /// type: unsigned int <br/>
    /// sesman <-> proxy <br/>
    /// value{0} <br/>
    struct context::formflag {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "formflag"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(118); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_CONTEXT_MODULE <br/>
    /// type: std::string <br/>
    /// sesman <-> proxy <br/>
    /// value = "login" <br/>
    struct context::module {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "module"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(119); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value = "login";
    };
    /// AUTHID_CONTEXT_FORCEMODULE <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{0} <br/>
    struct context::forcemodule {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "forcemodule"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(120); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// AUTHID_CONTEXT_PROXY_OPT <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::proxy_opt {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "proxy_opt"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(121); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_PATTERN_KILL <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::pattern_kill {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "pattern_kill"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(122); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_PATTERN_NOTIFY <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::pattern_notify {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "pattern_notify"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(123); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_OPT_MESSAGE <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::opt_message {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "opt_message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(124); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_LOGIN_MESSAGE <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::login_message {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "login_message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(125); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_SESSION_PROBE_OUTBOUND_CONNECTION_MONITORING_RULES <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::session_probe_outbound_connection_monitoring_rules {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "session_probe_outbound_connection_monitoring_rules"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(126); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_SESSION_PROBE_PROCESS_MONITORING_RULES <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::session_probe_process_monitoring_rules {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "session_probe_process_monitoring_rules"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(127); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_SESSION_PROBE_EXTRA_SYSTEM_PROCESSES <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::session_probe_extra_system_processes {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "session_probe_extra_system_processes"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(128); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_DISCONNECT_REASON <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::disconnect_reason {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "disconnect_reason"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(129); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_DISCONNECT_REASON_ACK <br/>
    /// type: bool <br/>
    /// sesman <- proxy <br/>
    /// value{0} <br/>
    struct context::disconnect_reason_ack {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "disconnect_reason_ack"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(130); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: std::string <br/>
    /// value{} <br/>
    struct context::ip_target {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "ip_target"; }
        using type = std::string;
        using mapped_type = type;
        type value{};
    };
    /// AUTHID_CONTEXT_RECORDING_STARTED <br/>
    /// type: bool <br/>
    /// sesman <- proxy <br/>
    /// value{0} <br/>
    struct context::recording_started {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "recording_started"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(131); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{0};
    };
    /// type: bool <br/>
    /// value{0} <br/>
    struct context::perform_automatic_reconnection {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "perform_automatic_reconnection"; }
        using type = bool;
        using mapped_type = type;
        type value{0};
    };
    /// type: std::array<unsigned char, 28> <br/>
    /// value{} <br/>
    struct context::server_auto_reconnect_packet {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "server_auto_reconnect_packet"; }
        using type = std::array<unsigned char, 28>;
        using mapped_type = type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_COMMAND <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::auth_command {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_command"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(132); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_NOTIFY <br/>
    /// type: std::string <br/>
    /// sesman <- proxy <br/>
    /// value{} <br/>
    struct context::auth_notify {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_notify"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(133); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_NOTIFY_RAIL_EXEC_FLAGS <br/>
    /// type: unsigned int <br/>
    /// sesman <- proxy <br/>
    /// value{} <br/>
    struct context::auth_notify_rail_exec_flags {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_notify_rail_exec_flags"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(134); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_NOTIFY_RAIL_EXEC_EXE_OR_FILE <br/>
    /// type: std::string <br/>
    /// sesman <- proxy <br/>
    /// value{} <br/>
    struct context::auth_notify_rail_exec_exe_or_file {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_notify_rail_exec_exe_or_file"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(135); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_COMMAND_RAIL_EXEC_EXEC_RESULT <br/>
    /// type: unsigned int <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::auth_command_rail_exec_exec_result {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_command_rail_exec_exec_result"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(136); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_COMMAND_RAIL_EXEC_FLAGS <br/>
    /// type: unsigned int <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::auth_command_rail_exec_flags {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_command_rail_exec_flags"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(137); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_COMMAND_RAIL_EXEC_ORIGINAL_EXE_OR_FILE <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::auth_command_rail_exec_original_exe_or_file {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_command_rail_exec_original_exe_or_file"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(138); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_COMMAND_RAIL_EXEC_EXE_OR_FILE <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::auth_command_rail_exec_exe_or_file {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_command_rail_exec_exe_or_file"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(139); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_COMMAND_RAIL_EXEC_WORKING_DIR <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::auth_command_rail_exec_working_dir {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_command_rail_exec_working_dir"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(140); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_COMMAND_RAIL_EXEC_ARGUMENTS <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::auth_command_rail_exec_arguments {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_command_rail_exec_arguments"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(141); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_COMMAND_RAIL_EXEC_ACCOUNT <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::auth_command_rail_exec_account {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_command_rail_exec_account"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(142); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_AUTH_COMMAND_RAIL_EXEC_PASSWORD <br/>
    /// type: std::string <br/>
    /// sesman -> proxy <br/>
    /// value{} <br/>
    struct context::auth_command_rail_exec_password {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "auth_command_rail_exec_password"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(143); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// AUTHID_CONTEXT_RAIL_DISCONNECT_MESSAGE_DELAY <br/>
    /// type: unsigned int <br/>
    /// sesman -> proxy <br/>
    /// value{3000} <br/>
    struct context::rail_disconnect_message_delay {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "rail_disconnect_message_delay"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(144); }
        using type = unsigned int;
        using sesman_and_spec_type = unsigned int;
        using mapped_type = sesman_and_spec_type;
        type value{3000};
    };
    /// AUTHID_CONTEXT_USE_SESSION_PROBE_TO_LAUNCH_REMOTE_PROGRAM <br/>
    /// type: bool <br/>
    /// sesman -> proxy <br/>
    /// value{1} <br/>
    struct context::use_session_probe_to_launch_remote_program {
        static constexpr bool is_sesman_to_proxy() { return 1; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "use_session_probe_to_launch_remote_program"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(145); }
        using type = bool;
        using sesman_and_spec_type = bool;
        using mapped_type = sesman_and_spec_type;
        type value{1};
    };
    /// AUTHID_CONTEXT_SESSION_PROBE_LAUNCH_ERROR_MESSAGE <br/>
    /// type: std::string <br/>
    /// sesman <- proxy <br/>
    /// value{} <br/>
    struct context::session_probe_launch_error_message {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 1; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "session_probe_launch_error_message"; }
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr authid_t index() { return authid_t(146); }
        using type = std::string;
        using sesman_and_spec_type = std::string;
        using mapped_type = sesman_and_spec_type;
        type value{};
    };
    /// type: std::string <br/>
    /// value{} <br/>
    struct context::close_box_extra_message {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return "context"; }
        static constexpr char const * name() { return "close_box_extra_message"; }
        using type = std::string;
        using mapped_type = type;
        type value{};
    };

    /// type: Theme <br/>
    /// value{} <br/>
    struct theme {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return ""; }
        static constexpr char const * name() { return "theme"; }
        using type = Theme;
        using mapped_type = type;
        type value{};
    };
    /// type: Font <br/>
    /// value{} <br/>
    struct font {
        static constexpr bool is_sesman_to_proxy() { return 0; }
        static constexpr bool is_proxy_to_sesman() { return 0; }
        static constexpr char const * section() { return ""; }
        static constexpr char const * name() { return "font"; }
        using type = Font;
        using mapped_type = type;
        type value{};
    };

}

namespace cfg_section {
struct globals
: cfg::globals::capture_chunk
, cfg::globals::auth_user
, cfg::globals::host
, cfg::globals::target
, cfg::globals::target_device
, cfg::globals::device_id
, cfg::globals::primary_user_id
, cfg::globals::target_user
, cfg::globals::target_application
, cfg::globals::target_application_account
, cfg::globals::target_application_password
, cfg::globals::bitmap_cache
, cfg::globals::glyph_cache
, cfg::globals::port
, cfg::globals::nomouse
, cfg::globals::notimestamp
, cfg::globals::encryptionLevel
, cfg::globals::authfile
, cfg::globals::handshake_timeout
, cfg::globals::session_timeout
, cfg::globals::inactivity_timeout
, cfg::globals::keepalive_grace_delay
, cfg::globals::authentication_timeout
, cfg::globals::close_timeout
, cfg::globals::trace_type
, cfg::globals::listen_address
, cfg::globals::enable_transparent_mode
, cfg::globals::certificate_password
, cfg::globals::png_path
, cfg::globals::wrm_path
, cfg::globals::is_rec
, cfg::globals::movie_path
, cfg::globals::enable_bitmap_update
, cfg::globals::enable_close_box
, cfg::globals::enable_osd
, cfg::globals::enable_osd_display_remote_target
, cfg::globals::persistent_path
, cfg::globals::enable_wab_integration
, cfg::globals::allow_using_multiple_monitors
, cfg::globals::bogus_refresh_rect
, cfg::globals::codec_id
, cfg::globals::video_quality
, cfg::globals::large_pointer_support
, cfg::globals::unicode_keyboard_event_support
, cfg::globals::mod_recv_timeout
, cfg::globals::spark_view_specific_glyph_width
, cfg::globals::experimental_enable_serializer_data_block_size_limit
, cfg::globals::experimental_support_resize_session_during_recording
{ static constexpr bool is_section = true; };

struct session_log
: cfg::session_log::enable_session_log
, cfg::session_log::log_path
, cfg::session_log::keyboard_input_masking_level
, cfg::session_log::hide_non_printable_kbd_input
{ static constexpr bool is_section = true; };

struct client
: cfg::client::keyboard_layout
, cfg::client::keyboard_layout_proposals
, cfg::client::ignore_logon_password
, cfg::client::performance_flags_default
, cfg::client::performance_flags_force_present
, cfg::client::performance_flags_force_not_present
, cfg::client::auto_adjust_performance_flags
, cfg::client::tls_fallback_legacy
, cfg::client::tls_support
, cfg::client::bogus_neg_request
, cfg::client::bogus_user_id
, cfg::client::disable_tsk_switch_shortcuts
, cfg::client::rdp_compression
, cfg::client::max_color_depth
, cfg::client::persistent_disk_bitmap_cache
, cfg::client::cache_waiting_list
, cfg::client::persist_bitmap_cache_on_disk
, cfg::client::bitmap_compression
, cfg::client::fast_path
, cfg::client::enable_suppress_output
, cfg::client::ssl_cipher_list
, cfg::client::show_target_user_in_f12_message
, cfg::client::enable_new_pointer_update
, cfg::client::bogus_ios_glyph_support_level
, cfg::client::transform_glyph_to_bitmap
, cfg::client::bogus_number_of_fastpath_input_event
, cfg::client::recv_timeout
{ static constexpr bool is_section = true; };

struct mod_rdp
: cfg::mod_rdp::rdp_compression
, cfg::mod_rdp::disconnect_on_logon_user_change
, cfg::mod_rdp::open_session_timeout
, cfg::mod_rdp::extra_orders
, cfg::mod_rdp::enable_nla
, cfg::mod_rdp::enable_kerberos
, cfg::mod_rdp::persistent_disk_bitmap_cache
, cfg::mod_rdp::cache_waiting_list
, cfg::mod_rdp::persist_bitmap_cache_on_disk
, cfg::mod_rdp::allow_channels
, cfg::mod_rdp::deny_channels
, cfg::mod_rdp::fast_path
, cfg::mod_rdp::server_redirection_support
, cfg::mod_rdp::redir_info
, cfg::mod_rdp::load_balance_info
, cfg::mod_rdp::bogus_sc_net_size
, cfg::mod_rdp::bogus_linux_cursor
, cfg::mod_rdp::proxy_managed_drives
, cfg::mod_rdp::ignore_auth_channel
, cfg::mod_rdp::auth_channel
, cfg::mod_rdp::checkout_channel
, cfg::mod_rdp::alternate_shell
, cfg::mod_rdp::shell_arguments
, cfg::mod_rdp::shell_working_directory
, cfg::mod_rdp::use_client_provided_alternate_shell
, cfg::mod_rdp::use_client_provided_remoteapp
, cfg::mod_rdp::use_native_remoteapp_capability
, cfg::mod_rdp::enable_session_probe
, cfg::mod_rdp::session_probe_use_clipboard_based_launcher
, cfg::mod_rdp::session_probe_enable_launch_mask
, cfg::mod_rdp::session_probe_on_launch_failure
, cfg::mod_rdp::session_probe_launch_timeout
, cfg::mod_rdp::session_probe_launch_fallback_timeout
, cfg::mod_rdp::session_probe_start_launch_timeout_timer_only_after_logon
, cfg::mod_rdp::session_probe_keepalive_timeout
, cfg::mod_rdp::session_probe_on_keepalive_timeout
, cfg::mod_rdp::session_probe_end_disconnected_session
, cfg::mod_rdp::session_probe_customize_executable_name
, cfg::mod_rdp::session_probe_enable_log
, cfg::mod_rdp::session_probe_enable_log_rotation
, cfg::mod_rdp::session_probe_disconnected_application_limit
, cfg::mod_rdp::session_probe_disconnected_session_limit
, cfg::mod_rdp::session_probe_idle_session_limit
, cfg::mod_rdp::session_probe_exe_or_file
, cfg::mod_rdp::session_probe_arguments
, cfg::mod_rdp::session_probe_clipboard_based_launcher_clipboard_initialization_delay
, cfg::mod_rdp::session_probe_clipboard_based_launcher_start_delay
, cfg::mod_rdp::session_probe_clipboard_based_launcher_long_delay
, cfg::mod_rdp::session_probe_clipboard_based_launcher_short_delay
, cfg::mod_rdp::session_probe_allow_multiple_handshake
, cfg::mod_rdp::session_probe_enable_crash_dump
, cfg::mod_rdp::session_probe_handle_usage_limit
, cfg::mod_rdp::session_probe_memory_usage_limit
, cfg::mod_rdp::server_cert_store
, cfg::mod_rdp::server_cert_check
, cfg::mod_rdp::server_access_allowed_message
, cfg::mod_rdp::server_cert_create_message
, cfg::mod_rdp::server_cert_success_message
, cfg::mod_rdp::server_cert_failure_message
, cfg::mod_rdp::server_cert_error_message
, cfg::mod_rdp::hide_client_name
, cfg::mod_rdp::clean_up_32_bpp_cursor
, cfg::mod_rdp::bogus_ios_rdpdr_virtual_channel
, cfg::mod_rdp::enable_rdpdr_data_analysis
, cfg::mod_rdp::remoteapp_bypass_legal_notice_delay
, cfg::mod_rdp::remoteapp_bypass_legal_notice_timeout
, cfg::mod_rdp::experimental_fix_input_event_sync
{ static constexpr bool is_section = true; };

struct metrics
: cfg::metrics::enable_rdp_metrics
, cfg::metrics::enable_vnc_metrics
, cfg::metrics::log_dir_path
, cfg::metrics::log_interval
, cfg::metrics::log_file_turnover_interval
, cfg::metrics::sign_key
{ static constexpr bool is_section = true; };

struct mod_vnc
: cfg::mod_vnc::clipboard_up
, cfg::mod_vnc::clipboard_down
, cfg::mod_vnc::encodings
, cfg::mod_vnc::allow_authentification_retries
, cfg::mod_vnc::server_clipboard_encoding_type
, cfg::mod_vnc::bogus_clipboard_infinite_loop
, cfg::mod_vnc::server_is_apple
{ static constexpr bool is_section = true; };

struct mod_replay
: cfg::mod_replay::on_end_of_data
, cfg::mod_replay::replay_on_loop
{ static constexpr bool is_section = true; };

struct ocr
: cfg::ocr::version
, cfg::ocr::locale
, cfg::ocr::interval
, cfg::ocr::on_title_bar_only
, cfg::ocr::max_unrecog_char_rate
{ static constexpr bool is_section = true; };

struct video
: cfg::video::capture_groupid
, cfg::video::capture_flags
, cfg::video::png_interval
, cfg::video::frame_interval
, cfg::video::break_interval
, cfg::video::png_limit
, cfg::video::replay_path
, cfg::video::hash_path
, cfg::video::record_tmp_path
, cfg::video::record_path
, cfg::video::disable_keyboard_log
, cfg::video::disable_clipboard_log
, cfg::video::disable_file_system_log
, cfg::video::rt_display
, cfg::video::wrm_color_depth_selection_strategy
, cfg::video::wrm_compression_algorithm
, cfg::video::video_break_interval
, cfg::video::bogus_vlc_frame_rate
, cfg::video::l_bitrate
, cfg::video::l_framerate
, cfg::video::l_height
, cfg::video::l_width
, cfg::video::l_qscale
, cfg::video::m_bitrate
, cfg::video::m_framerate
, cfg::video::m_height
, cfg::video::m_width
, cfg::video::m_qscale
, cfg::video::h_bitrate
, cfg::video::h_framerate
, cfg::video::h_height
, cfg::video::h_width
, cfg::video::h_qscale
{ static constexpr bool is_section = true; };

struct crypto
: cfg::crypto::key0
, cfg::crypto::key1
{ static constexpr bool is_section = true; };

struct debug
: cfg::debug::x224
, cfg::debug::mcs
, cfg::debug::sec
, cfg::debug::rdp
, cfg::debug::primary_orders
, cfg::debug::secondary_orders
, cfg::debug::bitmap_update
, cfg::debug::bitmap
, cfg::debug::capture
, cfg::debug::auth
, cfg::debug::session
, cfg::debug::front
, cfg::debug::mod_rdp
, cfg::debug::mod_vnc
, cfg::debug::mod_internal
, cfg::debug::mod_xup
, cfg::debug::widget
, cfg::debug::input
, cfg::debug::password
, cfg::debug::compression
, cfg::debug::cache
, cfg::debug::performance
, cfg::debug::pass_dialog_box
, cfg::debug::ocr
, cfg::debug::ffmpeg
, cfg::debug::config
{ static constexpr bool is_section = true; };

struct remote_program
: cfg::remote_program::allow_resize_hosted_desktop
{ static constexpr bool is_section = true; };

struct translation
: cfg::translation::language
, cfg::translation::password_en
, cfg::translation::password_fr
{ static constexpr bool is_section = true; };

struct internal_mod
: cfg::internal_mod::theme
{ static constexpr bool is_section = true; };

struct context
: cfg::context::movie
, cfg::context::opt_bitrate
, cfg::context::opt_framerate
, cfg::context::opt_qscale
, cfg::context::opt_bpp
, cfg::context::opt_height
, cfg::context::opt_width
, cfg::context::auth_error_message
, cfg::context::selector
, cfg::context::selector_current_page
, cfg::context::selector_device_filter
, cfg::context::selector_group_filter
, cfg::context::selector_proto_filter
, cfg::context::selector_lines_per_page
, cfg::context::selector_number_of_pages
, cfg::context::target_password
, cfg::context::target_host
, cfg::context::target_str
, cfg::context::target_service
, cfg::context::target_port
, cfg::context::target_protocol
, cfg::context::password
, cfg::context::reporting
, cfg::context::auth_channel_answer
, cfg::context::auth_channel_target
, cfg::context::message
, cfg::context::accept_message
, cfg::context::display_message
, cfg::context::rejected
, cfg::context::authenticated
, cfg::context::keepalive
, cfg::context::session_id
, cfg::context::end_date_cnx
, cfg::context::end_time
, cfg::context::mode_console
, cfg::context::timezone
, cfg::context::real_target_device
, cfg::context::authentication_challenge
, cfg::context::ticket
, cfg::context::comment
, cfg::context::duration
, cfg::context::duration_max
, cfg::context::waitinforeturn
, cfg::context::showform
, cfg::context::formflag
, cfg::context::module
, cfg::context::forcemodule
, cfg::context::proxy_opt
, cfg::context::pattern_kill
, cfg::context::pattern_notify
, cfg::context::opt_message
, cfg::context::login_message
, cfg::context::session_probe_outbound_connection_monitoring_rules
, cfg::context::session_probe_process_monitoring_rules
, cfg::context::session_probe_extra_system_processes
, cfg::context::disconnect_reason
, cfg::context::disconnect_reason_ack
, cfg::context::ip_target
, cfg::context::recording_started
, cfg::context::perform_automatic_reconnection
, cfg::context::server_auto_reconnect_packet
, cfg::context::auth_command
, cfg::context::auth_notify
, cfg::context::auth_notify_rail_exec_flags
, cfg::context::auth_notify_rail_exec_exe_or_file
, cfg::context::auth_command_rail_exec_exec_result
, cfg::context::auth_command_rail_exec_flags
, cfg::context::auth_command_rail_exec_original_exe_or_file
, cfg::context::auth_command_rail_exec_exe_or_file
, cfg::context::auth_command_rail_exec_working_dir
, cfg::context::auth_command_rail_exec_arguments
, cfg::context::auth_command_rail_exec_account
, cfg::context::auth_command_rail_exec_password
, cfg::context::rail_disconnect_message_delay
, cfg::context::use_session_probe_to_launch_remote_program
, cfg::context::session_probe_launch_error_message
, cfg::context::close_box_extra_message
{ static constexpr bool is_section = true; };

}

namespace configs {
struct VariablesConfiguration
: cfg_section::globals
, cfg_section::session_log
, cfg_section::client
, cfg_section::mod_rdp
, cfg_section::metrics
, cfg_section::mod_vnc
, cfg_section::mod_replay
, cfg_section::ocr
, cfg_section::video
, cfg_section::crypto
, cfg_section::debug
, cfg_section::remote_program
, cfg_section::translation
, cfg_section::internal_mod
, cfg_section::context
, cfg::theme
, cfg::font
{};

using VariablesAclPack = Pack<
  cfg::globals::capture_chunk
, cfg::globals::auth_user
, cfg::globals::host
, cfg::globals::target
, cfg::globals::target_device
, cfg::globals::device_id
, cfg::globals::primary_user_id
, cfg::globals::target_user
, cfg::globals::target_application
, cfg::globals::target_application_account
, cfg::globals::target_application_password
, cfg::globals::inactivity_timeout
, cfg::globals::trace_type
, cfg::globals::is_rec
, cfg::globals::movie_path
, cfg::globals::unicode_keyboard_event_support
, cfg::globals::mod_recv_timeout
, cfg::session_log::log_path
, cfg::client::keyboard_layout
, cfg::client::disable_tsk_switch_shortcuts
, cfg::mod_rdp::enable_nla
, cfg::mod_rdp::enable_kerberos
, cfg::mod_rdp::server_redirection_support
, cfg::mod_rdp::load_balance_info
, cfg::mod_rdp::bogus_sc_net_size
, cfg::mod_rdp::proxy_managed_drives
, cfg::mod_rdp::ignore_auth_channel
, cfg::mod_rdp::alternate_shell
, cfg::mod_rdp::shell_arguments
, cfg::mod_rdp::shell_working_directory
, cfg::mod_rdp::use_client_provided_alternate_shell
, cfg::mod_rdp::use_client_provided_remoteapp
, cfg::mod_rdp::use_native_remoteapp_capability
, cfg::mod_rdp::enable_session_probe
, cfg::mod_rdp::session_probe_use_clipboard_based_launcher
, cfg::mod_rdp::session_probe_enable_launch_mask
, cfg::mod_rdp::session_probe_on_launch_failure
, cfg::mod_rdp::session_probe_launch_timeout
, cfg::mod_rdp::session_probe_launch_fallback_timeout
, cfg::mod_rdp::session_probe_start_launch_timeout_timer_only_after_logon
, cfg::mod_rdp::session_probe_keepalive_timeout
, cfg::mod_rdp::session_probe_on_keepalive_timeout
, cfg::mod_rdp::session_probe_end_disconnected_session
, cfg::mod_rdp::session_probe_enable_log
, cfg::mod_rdp::session_probe_enable_log_rotation
, cfg::mod_rdp::session_probe_disconnected_application_limit
, cfg::mod_rdp::session_probe_disconnected_session_limit
, cfg::mod_rdp::session_probe_idle_session_limit
, cfg::mod_rdp::session_probe_clipboard_based_launcher_clipboard_initialization_delay
, cfg::mod_rdp::session_probe_clipboard_based_launcher_start_delay
, cfg::mod_rdp::session_probe_clipboard_based_launcher_long_delay
, cfg::mod_rdp::session_probe_clipboard_based_launcher_short_delay
, cfg::mod_rdp::session_probe_enable_crash_dump
, cfg::mod_rdp::session_probe_handle_usage_limit
, cfg::mod_rdp::session_probe_memory_usage_limit
, cfg::mod_rdp::server_cert_store
, cfg::mod_rdp::server_cert_check
, cfg::mod_rdp::server_access_allowed_message
, cfg::mod_rdp::server_cert_create_message
, cfg::mod_rdp::server_cert_success_message
, cfg::mod_rdp::server_cert_failure_message
, cfg::mod_rdp::server_cert_error_message
, cfg::mod_rdp::enable_rdpdr_data_analysis
, cfg::mod_vnc::clipboard_up
, cfg::mod_vnc::clipboard_down
, cfg::mod_vnc::server_clipboard_encoding_type
, cfg::mod_vnc::bogus_clipboard_infinite_loop
, cfg::mod_vnc::server_is_apple
, cfg::mod_replay::replay_on_loop
, cfg::video::rt_display
, cfg::crypto::key0
, cfg::crypto::key1
, cfg::remote_program::allow_resize_hosted_desktop
, cfg::translation::language
, cfg::translation::password_en
, cfg::translation::password_fr
, cfg::context::opt_bitrate
, cfg::context::opt_framerate
, cfg::context::opt_qscale
, cfg::context::opt_bpp
, cfg::context::opt_height
, cfg::context::opt_width
, cfg::context::selector
, cfg::context::selector_current_page
, cfg::context::selector_device_filter
, cfg::context::selector_group_filter
, cfg::context::selector_proto_filter
, cfg::context::selector_lines_per_page
, cfg::context::selector_number_of_pages
, cfg::context::target_password
, cfg::context::target_host
, cfg::context::target_str
, cfg::context::target_service
, cfg::context::target_port
, cfg::context::target_protocol
, cfg::context::password
, cfg::context::reporting
, cfg::context::auth_channel_answer
, cfg::context::auth_channel_target
, cfg::context::message
, cfg::context::accept_message
, cfg::context::display_message
, cfg::context::rejected
, cfg::context::authenticated
, cfg::context::keepalive
, cfg::context::session_id
, cfg::context::end_date_cnx
, cfg::context::end_time
, cfg::context::mode_console
, cfg::context::timezone
, cfg::context::real_target_device
, cfg::context::authentication_challenge
, cfg::context::ticket
, cfg::context::comment
, cfg::context::duration
, cfg::context::duration_max
, cfg::context::waitinforeturn
, cfg::context::showform
, cfg::context::formflag
, cfg::context::module
, cfg::context::forcemodule
, cfg::context::proxy_opt
, cfg::context::pattern_kill
, cfg::context::pattern_notify
, cfg::context::opt_message
, cfg::context::login_message
, cfg::context::session_probe_outbound_connection_monitoring_rules
, cfg::context::session_probe_process_monitoring_rules
, cfg::context::session_probe_extra_system_processes
, cfg::context::disconnect_reason
, cfg::context::disconnect_reason_ack
, cfg::context::recording_started
, cfg::context::auth_command
, cfg::context::auth_notify
, cfg::context::auth_notify_rail_exec_flags
, cfg::context::auth_notify_rail_exec_exe_or_file
, cfg::context::auth_command_rail_exec_exec_result
, cfg::context::auth_command_rail_exec_flags
, cfg::context::auth_command_rail_exec_original_exe_or_file
, cfg::context::auth_command_rail_exec_exe_or_file
, cfg::context::auth_command_rail_exec_working_dir
, cfg::context::auth_command_rail_exec_arguments
, cfg::context::auth_command_rail_exec_account
, cfg::context::auth_command_rail_exec_password
, cfg::context::rail_disconnect_message_delay
, cfg::context::use_session_probe_to_launch_remote_program
, cfg::context::session_probe_launch_error_message
>;
}
